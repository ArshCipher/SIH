import logging
from typing import Dict, List, Optional
import langdetect
from langdetect import detect
import os

# Make googletrans optional (it pulls httpx which breaks on Python 3.13 due to cgi removal)
try:
    from googletrans import Translator as GoogleTranslator  # type: ignore
except Exception:  # pragma: no cover - optional dependency may fail
    GoogleTranslator = None

logger = logging.getLogger(__name__)

class TranslationService:
    """Service for handling multilingual translation"""
    
    def __init__(self):
        # Initialize translator if available; otherwise operate in pass-through mode
        self.translator = GoogleTranslator() if GoogleTranslator else None
        
        # Supported languages mapping
        self.supported_languages = {
            "en": "English",
            "hi": "Hindi",
            "bn": "Bengali",
            "te": "Telugu",
            "mr": "Marathi",
            "ta": "Tamil",
            "gu": "Gujarati",
            "kn": "Kannada",
            "ml": "Malayalam",
            "pa": "Punjabi",
            "or": "Odia",
            "as": "Assamese"
        }
        
        # Common health terms in different languages
        self.health_terms = {
            "en": {
                "fever": "fever",
                "cough": "cough",
                "headache": "headache",
                "pain": "pain",
                "doctor": "doctor",
                "hospital": "hospital",
                "medicine": "medicine",
                "vaccine": "vaccine"
            },
            "hi": {
                "fever": "рдмреБрдЦрд╛рд░",
                "cough": "рдЦрд╛рдВрд╕реА",
                "headache": "рд╕рд┐рд░рджрд░реНрдж",
                "pain": "рджрд░реНрдж",
                "doctor": "рдбреЙрдХреНрдЯрд░",
                "hospital": "рдЕрд╕реНрдкрддрд╛рд▓",
                "medicine": "рджрд╡рд╛",
                "vaccine": "рдЯреАрдХрд╛"
            },
            "bn": {
                "fever": "ржЬрзНржмрж░",
                "cough": "ржХрж╛рж╢рж┐",
                "headache": "ржорж╛ржерж╛ржмрзНржпржерж╛",
                "pain": "ржмрзНржпржерж╛",
                "doctor": "ржбрж╛ржХрзНрждрж╛рж░",
                "hospital": "рж╣рж╛рж╕ржкрж╛рждрж╛рж▓",
                "medicine": "ржФрж╖ржз",
                "vaccine": "ржЯрж┐ржХрж╛"
            },
            "te": {
                "fever": "р░Ьр▒Нр░╡р░░р░В",
                "cough": "р░Хр░лр░В",
                "headache": "р░др░▓р░ир▒Кр░кр▒Нр░кр░┐",
                "pain": "р░ир▒Кр░кр▒Нр░кр░┐",
                "doctor": "р░бр░╛р░Хр▒Нр░Яр░░р▒Н",
                "hospital": "р░Жр░╕р▒Бр░кр░др▒Нр░░р░┐",
                "medicine": "р░ор░Вр░жр▒Б",
                "vaccine": "р░╡р▒Нр░пр░╛р░Хр▒Нр░╕р░┐р░ир▒Н"
            }
        }
    
    async def translate_text(self, text: str, target_language: str, source_language: str = None) -> str:
        """Translate text to target language"""
        try:
            if not text or not text.strip():
                return text
            
            # Detect source language if not provided
            if not source_language:
                try:
                    source_language = detect(text)
                except:
                    source_language = "en"  # Default to English
            
            # If source and target are the same, return original text
            if source_language == target_language:
                return text
            
            # If no translator available, return original text (best-effort fallback)
            if not self.translator:
                if source_language != target_language:
                    logger.warning("Translation requested but googletrans is unavailable; returning original text")
                return text

            # Translate the text using googletrans
            result = self.translator.translate(text, src=source_language, dest=target_language)
            return result.text
            
        except Exception as e:
            logger.error(f"Error translating text: {str(e)}")
            return text  # Return original text if translation fails
    
    async def detect_language(self, text: str) -> str:
        """Detect the language of the input text"""
        try:
            if not text or not text.strip():
                return "en"  # Default to English
            
            detected_lang = detect(text)
            return detected_lang
            
        except Exception as e:
            logger.error(f"Error detecting language: {str(e)}")
            return "en"  # Default to English
    
    async def translate_health_terms(self, text: str, target_language: str) -> str:
        """Translate health-specific terms with better accuracy"""
        try:
            if target_language not in self.health_terms:
                return await self.translate_text(text, target_language)
            
            translated_text = text
            source_terms = self.health_terms["en"]  # English terms as source
            target_terms = self.health_terms[target_language]
            
            # Replace health terms with their translations
            for english_term, target_term in target_terms.items():
                if english_term in source_terms:
                    # Case-insensitive replacement
                    import re
                    pattern = re.compile(re.escape(english_term), re.IGNORECASE)
                    translated_text = pattern.sub(target_term, translated_text)
            
            return translated_text
            
        except Exception as e:
            logger.error(f"Error translating health terms: {str(e)}")
            return await self.translate_text(text, target_language)
    
    async def get_supported_languages(self) -> Dict[str, str]:
        """Get list of supported languages"""
        return self.supported_languages
    
    async def is_language_supported(self, language_code: str) -> bool:
        """Check if language is supported"""
        return language_code in self.supported_languages
    
    async def translate_response_template(self, template: str, language: str, **kwargs) -> str:
        """Translate response templates with placeholders"""
        try:
            # Translate the template
            translated_template = await self.translate_text(template, language)
            
            # Replace placeholders if any
            if kwargs:
                translated_template = translated_template.format(**kwargs)
            
            return translated_template
            
        except Exception as e:
            logger.error(f"Error translating response template: {str(e)}")
            return template
    
    async def get_localized_greeting(self, language: str) -> str:
        """Get greeting message in specified language"""
        greetings = {
            "en": "Hello! I'm your health assistant. How can I help you today?",
            "hi": "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
            "bn": "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣рж╛ржпрж╝ржХред ржЖржЬ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
            "te": "р░╣р░▓р▒Л! р░ир▒Зр░ир▒Б р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐ред р░Ир░░р▒Лр░Ьр▒Б р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б?",
            "mr": "рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ рдЖрд╣реЗ. рдЖрдЬ рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?",
            "ta": "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН роЖро░рпЛроХрпНроХро┐роп роЙродро╡ро┐ропро╛ро│ро░рпН. роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОро╡рпНро╡ро╛ро▒рпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
            "gu": "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ ркЖрк░рлЛркЧрлНркп рк╕рк╣рк╛ркпркХ ркЫрлБркВ. ркЖркЬрлЗ рк╣рлБркВ ркдркорк╛рк░рлА ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?",
            "kn": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╕р▓╣р▓╛р▓пр▓Х. р▓Зр▓Вр▓жр│Б р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?",
            "ml": "р┤╣р┤▓р╡Л! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╕р┤╣р┤╛р┤пр┤┐р┤пр┤╛р┤гр╡Н. р┤Зр┤ир╡Нр┤ир╡Н р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р┤В?",
            "pa": "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ ридрйБри╣ри╛рибри╛ ри╕ри┐ри╣рид ри╕ри╣ри╛риЗриХ ри╣ри╛риВред риЕрй▒риЬ риорйИриВ ридрйБри╣ри╛рибрйА риХри┐ри╡рйЗриВ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ?",
            "or": "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмдрнБрморм░ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рм╕рм╣рм╛рнЯрмХред рмЖрмЬрм┐ рморнБрмБ рмдрнБрмормХрнБ рмХрм┐рмкрм░рм┐ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рм┐рммрм┐?",
            "as": "ржиржорж╕рзНржХрж╛рз░! ржоржЗ ржЖржкрзЛржирж╛рз░ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣рж╛ржпрж╝ржХред ржЖржЬрж┐ ржоржЗ ржЖржкрзЛржирж╛ржХ ржХрзЗржирзЗржХрзИ рж╕рж╣рж╛ржпрж╝ ржХрз░рж┐ржм ржкрж╛рз░рзЛржБ?"
        }
        
        return greetings.get(language, greetings["en"])
    
    async def get_localized_emergency_message(self, language: str) -> str:
        """Get emergency message in specified language"""
        emergency_messages = {
            "en": "ЁЯЪи EMERGENCY ALERT ЁЯЪи\n\nFor immediate medical assistance:\nтАв Call 108 (Emergency Ambulance)\nтАв Contact nearest hospital\nтАв Visit emergency room immediately\n\nStay calm and seek professional help right away.",
            "hi": "ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪреЗрддрд╛рд╡рдиреА ЁЯЪи\n\nрддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП:\nтАв 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ (рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдПрдореНрдмреБрд▓реЗрдВрд╕)\nтАв рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ\nтАв рддреБрд░рдВрдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрдХреНрд╖ рдореЗрдВ рдЬрд╛рдПрдВ\n\nрд╢рд╛рдВрдд рд░рд╣реЗрдВ рдФрд░ рддреБрд░рдВрдд рдкреЗрд╢реЗрд╡рд░ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред",
            "bn": "ЁЯЪи ржЬрж░рзБрж░рж┐ рж╕рждрж░рзНржХрждрж╛ ЁЯЪи\n\nрждрж╛рждрзНржХрзНрж╖ржгрж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп:\nтАв рззрзжрзо ржиржорзНржмрж░рзЗ ржХрж▓ ржХрж░рзБржи (ржЬрж░рзБрж░рж┐ ржЕрзНржпрж╛ржорзНржмрзБрж▓рзЗржирзНрж╕)\nтАв ржирж┐ржХржЯржмрж░рзНрждрзА рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи\nтАв ржЕржмрж┐рж▓ржорзНржмрзЗ ржЬрж░рзБрж░рж┐ ржмрж┐ржнрж╛ржЧрзЗ ржпрж╛ржи\n\nрж╢рж╛ржирзНржд ржерж╛ржХрзБржи ржПржмржВ ржЕржмрж┐рж▓ржорзНржмрзЗ ржкрзЗрж╢рж╛ржжрж╛рж░ рж╕рж╛рж╣рж╛ржпрзНржп ржирж┐ржиред",
            "te": "ЁЯЪи р░Ер░др▒Нр░пр░╡р░╕р░░ р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х ЁЯЪи\n\nр░др░Хр▒Нр░╖р░г р░╡р▒Ир░жр▒Нр░п р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В:\nтАв 108 р░Хр░┐ р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ (р░Ер░др▒Нр░пр░╡р░╕р░░ р░Жр░Вр░мр▒Бр░▓р▒Жр░ир▒Нр░╕р▒Н)\nтАв р░жр░Чр▒Нр░Чр░░р░┐ р░Жр░╕р▒Бр░кр░др▒Нр░░р░┐р░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐\nтАв р░╡р▒Жр░Вр░Яр░ир▒З р░Ер░др▒Нр░пр░╡р░╕р░░ р░╡р░┐р░нр░╛р░Чр░╛р░ир░┐р░Хр░┐ р░╡р▒Жр░│р▒Нр░▓р░Вр░бр░┐\n\nр░╢р░╛р░Вр░др░Вр░Чр░╛ р░Йр░Вр░бр░┐ р░╡р▒Жр░Вр░Яр░ир▒З р░╡р▒Гр░др▒Нр░др░┐р░кр░░р░ор▒Ир░и р░╕р░╣р░╛р░пр░В р░кр▒Кр░Вр░жр░Вр░бр░┐ред"
        }
        
        return emergency_messages.get(language, emergency_messages["en"])
    
    async def get_localized_vaccination_message(self, language: str, vaccine_name: str) -> str:
        """Get vaccination message in specified language"""
        templates = {
            "en": f"Vaccination Schedule for {vaccine_name}:\n\nPlease consult with your healthcare provider for the most up-to-date vaccination schedule.",
            "hi": f"{vaccine_name} рдХреЗ рд▓рд┐рдП рдЯреАрдХрд╛рдХрд░рдг рдХрд╛рд░реНрдпрдХреНрд░рдо:\n\nрд╕рдмрд╕реЗ рдЕрджреНрдпрддрди рдЯреАрдХрд╛рдХрд░рдг рдХрд╛рд░реНрдпрдХреНрд░рдо рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛ рдкреНрд░рджрд╛рддрд╛ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВред",
            "bn": f"{vaccine_name} ржПрж░ ржЬржирзНржп ржЯрж┐ржХрж╛ржжрж╛ржи рж╕ржоржпрж╝рж╕рзВржЪрзА:\n\nрж╕рж░рзНржмрж╢рзЗрж╖ ржЯрж┐ржХрж╛ржжрж╛ржи рж╕ржоржпрж╝рж╕рзВржЪрзАрж░ ржЬржирзНржп ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕рзЗржмрж╛ ржкрзНрж░ржжрж╛ржиржХрж╛рж░рзАрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рзБржиред",
            "te": f"{vaccine_name} р░Хр▒Лр░╕р░В р░Яр▒Ар░Хр░╛р░Хр░░р░г р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н:\n\nр░Ер░др▒Нр░пр░Вр░д р░др░╛р░Ьр░╛ р░Яр▒Ар░Хр░╛р░Хр░░р░г р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░Хр▒Лр░╕р░В р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░╕р▒Зр░╡р░╛ р░кр▒Нр░░р░жр░╛р░др░др▒Л р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ред"
        }
        
        return templates.get(language, templates["en"])
